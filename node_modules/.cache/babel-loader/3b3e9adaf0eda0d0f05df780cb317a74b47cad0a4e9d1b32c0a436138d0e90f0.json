{"ast":null,"code":"var _jsxFileName = \"/Users/anameisel/Documents/personal/learning/iungo/Software-Engineering/week-6/blink/src/App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import { React, useState, useEffect } from 'react';\n// import { GiphyFetch } from \"@giphy/js-fetch-api\";\n// import { Grid} from \"@giphy/react-components\";\n\n// function App() {\n//   const [currentQuestion, setCurrentQuestion] = useState(0)\n//   const [glossary, setGlossary] = useState([]);\n//   const [clickedQuestions, setClickedQuestions] = useState([])\n//   const [columns, setColumns] = useState(1)\n\n//   const apikey = '48878147a05368955e614dca472e6dc4';\n//     const category = 'world';\n//     const url = 'https://gnews.io/api/v4/top-headlines?category=' + category + '&lang=en&country=us&max=50&apikey=' + apikey;\n//     useEffect(() => {\n//      fetch(url).then(result => result.json()).then(alldata => setGlossary(alldata.articles)).catch(error => console.log(error.message))\n//     }, [])\n\n//     function nextQuestion() {\n//       const nextIndex = currentQuestion >= glossary.length - 1 ? 0 : currentQuestion + 1;\n//       setCurrentQuestion(nextIndex);\n//       setClickedQuestions([...clickedQuestions, currentQuestion]);\n//     }\n\n//     const giphyFetch = new GiphyFetch(\"sXpGFDGZs0Dv1mmNFvYaGUvYwKX0PWIh\");\n\n//     function GridDemo({ onGifClick }) {\n//       const fetchGifs = () =>\n//         giphyFetch.trending({ limit: 1 });\n//       return (\n//         <>\n//           <Grid\n//             onGifClick={(gif, e) => {\n//               setColumns(columns + 1); \n//               onGifClick(gif, e);\n//             }}\n//             fetchGifs={fetchGifs}\n//             width={300}\n//             columns={columns}\n//             gutter={0}\n//           />\n//         </>\n//       );\n//     }\n\n//     const [modalGif, setModalGif] = useState();\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"quiz\">\n//           <button onClick={() => nextQuestion()}>Add</button>\n//             <div className=\"answers\"> \n//               {/* {glossary[currentQuestion] && (\n//                 <div key={glossary[currentQuestion].publishedAt}>\n//                   {glossary[currentQuestion].title}\n//                 </div>\n//               )} */}\n//               <GridDemo\n//             onGifClick={(gif, e) => {\n//               console.log(\"gif\", gif);\n//               e.preventDefault();\n//               setModalGif(gif);\n//             }}\n//           />\n//               {/* {clickedQuestions.length > 0 && clickedQuestions.map((questionIndex, index) => (\n//             <div key={index}>\n//               {glossary[questionIndex] && glossary[questionIndex].title}\n//             </div>\n//           ))} */}\n//             </div>\n//         </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\nimport { Grid } from \"@giphy/react-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [glossary, setGlossary] = useState([]);\n  const [clickedQuestions, setClickedQuestions] = useState([]);\n  const [columns, setColumns] = useState(1);\n  const apikey = '48878147a05368955e614dca472e6dc4';\n  const category = 'world';\n  const url = 'https://gnews.io/api/v4/top-headlines?category=' + category + '&lang=en&country=us&max=50&apikey=' + apikey;\n  useEffect(() => {\n    fetch(url).then(result => result.json()).then(alldata => setGlossary(alldata.articles)).catch(error => console.log(error.message));\n  }, []);\n  function nextQuestion() {\n    const nextIndex = currentQuestion >= glossary.length - 1 ? 0 : currentQuestion + 1;\n    setCurrentQuestion(nextIndex);\n    setClickedQuestions([...clickedQuestions, currentQuestion]);\n  }\n  const giphyFetch = new GiphyFetch(\"sXpGFDGZs0Dv1mmNFvYaGUvYwKX0PWIh\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setColumns(columns + 1),\n        children: \"Add Column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: /*#__PURE__*/_jsxDEV(GridDemo, {\n          columns: columns,\n          giphyFetch: giphyFetch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"iVmSRmU6hpMJ3lDgng3RgMkCD1E=\");\n_c = App;\nfunction GridDemo({\n  columns,\n  giphyFetch\n}) {\n  const fetchGifs = () => giphyFetch.trending({\n    limit: 1\n  });\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    fetchGifs: fetchGifs,\n    width: 300,\n    columns: columns,\n    gutter: 0\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_c2 = GridDemo;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"GridDemo\");","map":{"version":3,"names":["React","useState","useEffect","GiphyFetch","Grid","jsxDEV","_jsxDEV","App","_s","currentQuestion","setCurrentQuestion","glossary","setGlossary","clickedQuestions","setClickedQuestions","columns","setColumns","apikey","category","url","fetch","then","result","json","alldata","articles","catch","error","console","log","message","nextQuestion","nextIndex","length","giphyFetch","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","GridDemo","_c","fetchGifs","trending","limit","width","gutter","_c2","$RefreshReg$"],"sources":["/Users/anameisel/Documents/personal/learning/iungo/Software-Engineering/week-6/blink/src/App.js"],"sourcesContent":["// import './App.css';\n// import { React, useState, useEffect } from 'react';\n// import { GiphyFetch } from \"@giphy/js-fetch-api\";\n// import { Grid} from \"@giphy/react-components\";\n\n// function App() {\n//   const [currentQuestion, setCurrentQuestion] = useState(0)\n//   const [glossary, setGlossary] = useState([]);\n//   const [clickedQuestions, setClickedQuestions] = useState([])\n//   const [columns, setColumns] = useState(1)\n\n\n//   const apikey = '48878147a05368955e614dca472e6dc4';\n//     const category = 'world';\n//     const url = 'https://gnews.io/api/v4/top-headlines?category=' + category + '&lang=en&country=us&max=50&apikey=' + apikey;\n//     useEffect(() => {\n//      fetch(url).then(result => result.json()).then(alldata => setGlossary(alldata.articles)).catch(error => console.log(error.message))\n//     }, [])\n\n//     function nextQuestion() {\n//       const nextIndex = currentQuestion >= glossary.length - 1 ? 0 : currentQuestion + 1;\n//       setCurrentQuestion(nextIndex);\n//       setClickedQuestions([...clickedQuestions, currentQuestion]);\n//     }\n\n//     const giphyFetch = new GiphyFetch(\"sXpGFDGZs0Dv1mmNFvYaGUvYwKX0PWIh\");\n  \n//     function GridDemo({ onGifClick }) {\n//       const fetchGifs = () =>\n//         giphyFetch.trending({ limit: 1 });\n//       return (\n//         <>\n//           <Grid\n//             onGifClick={(gif, e) => {\n//               setColumns(columns + 1); \n//               onGifClick(gif, e);\n//             }}\n//             fetchGifs={fetchGifs}\n//             width={300}\n//             columns={columns}\n//             gutter={0}\n//           />\n//         </>\n//       );\n//     }\n\n//     const [modalGif, setModalGif] = useState();\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"quiz\">\n//           <button onClick={() => nextQuestion()}>Add</button>\n//             <div className=\"answers\"> \n//               {/* {glossary[currentQuestion] && (\n//                 <div key={glossary[currentQuestion].publishedAt}>\n//                   {glossary[currentQuestion].title}\n//                 </div>\n//               )} */}\n//               <GridDemo\n//             onGifClick={(gif, e) => {\n//               console.log(\"gif\", gif);\n//               e.preventDefault();\n//               setModalGif(gif);\n//             }}\n//           />\n//               {/* {clickedQuestions.length > 0 && clickedQuestions.map((questionIndex, index) => (\n//             <div key={index}>\n//               {glossary[questionIndex] && glossary[questionIndex].title}\n//             </div>\n//           ))} */}\n//             </div>\n//         </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { GiphyFetch } from \"@giphy/js-fetch-api\";\nimport { Grid } from \"@giphy/react-components\";\n\nfunction App() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [glossary, setGlossary] = useState([]);\n  const [clickedQuestions, setClickedQuestions] = useState([]);\n  const [columns, setColumns] = useState(1);\n\n  const apikey = '48878147a05368955e614dca472e6dc4';\n  const category = 'world';\n  const url = 'https://gnews.io/api/v4/top-headlines?category=' + category + '&lang=en&country=us&max=50&apikey=' + apikey;\n  \n  useEffect(() => {\n    fetch(url)\n      .then(result => result.json())\n      .then(alldata => setGlossary(alldata.articles))\n      .catch(error => console.log(error.message))\n  }, [])\n\n  function nextQuestion() {\n    const nextIndex = currentQuestion >= glossary.length - 1 ? 0 : currentQuestion + 1;\n    setCurrentQuestion(nextIndex);\n    setClickedQuestions([...clickedQuestions, currentQuestion]);\n  }\n\n  const giphyFetch = new GiphyFetch(\"sXpGFDGZs0Dv1mmNFvYaGUvYwKX0PWIh\");\n\n  return (\n    <div className=\"App\">\n      <div className=\"quiz\">\n        <button onClick={() => setColumns(columns + 1)}>Add Column</button>\n        <div className=\"answers\">\n          {/* {glossary[currentQuestion] && (\n                <div key={glossary[currentQuestion].publishedAt}>\n                  {glossary[currentQuestion].title}\n                </div>\n              )} */}\n          <GridDemo\n            columns={columns}\n            giphyFetch={giphyFetch}\n          />\n          {/* {clickedQuestions.length > 0 && clickedQuestions.map((questionIndex, index) => (\n            <div key={index}>\n              {glossary[questionIndex] && glossary[questionIndex].title}\n            </div>\n          ))} */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction GridDemo({ columns, giphyFetch }) {\n  const fetchGifs = () =>\n    giphyFetch.trending({ limit: 1 });\n  return (\n    <Grid\n      fetchGifs={fetchGifs}\n      width={300}\n      columns={columns}\n      gutter={0}\n    />\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,IAAI,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAEzC,MAAMgB,MAAM,GAAG,kCAAkC;EACjD,MAAMC,QAAQ,GAAG,OAAO;EACxB,MAAMC,GAAG,GAAG,iDAAiD,GAAGD,QAAQ,GAAG,oCAAoC,GAAGD,MAAM;EAExHf,SAAS,CAAC,MAAM;IACdkB,KAAK,CAACD,GAAG,CAAC,CACPE,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC,CAC7BF,IAAI,CAACG,OAAO,IAAIZ,WAAW,CAACY,OAAO,CAACC,QAAQ,CAAC,CAAC,CAC9CC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC;EAC/C,CAAC,EAAE,EAAE,CAAC;EAEN,SAASC,YAAYA,CAAA,EAAG;IACtB,MAAMC,SAAS,GAAGvB,eAAe,IAAIE,QAAQ,CAACsB,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGxB,eAAe,GAAG,CAAC;IAClFC,kBAAkB,CAACsB,SAAS,CAAC;IAC7BlB,mBAAmB,CAAC,CAAC,GAAGD,gBAAgB,EAAEJ,eAAe,CAAC,CAAC;EAC7D;EAEA,MAAMyB,UAAU,GAAG,IAAI/B,UAAU,CAAC,kCAAkC,CAAC;EAErE,oBACEG,OAAA;IAAK6B,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB9B,OAAA;MAAK6B,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnB9B,OAAA;QAAQ+B,OAAO,EAAEA,CAAA,KAAMrB,UAAU,CAACD,OAAO,GAAG,CAAC,CAAE;QAAAqB,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnEnC,OAAA;QAAK6B,SAAS,EAAC,SAAS;QAAAC,QAAA,eAMtB9B,OAAA,CAACoC,QAAQ;UACP3B,OAAO,EAAEA,OAAQ;UACjBmB,UAAU,EAAEA;QAAW;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjC,EAAA,CAhDQD,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AAkDZ,SAASmC,QAAQA,CAAC;EAAE3B,OAAO;EAAEmB;AAAW,CAAC,EAAE;EACzC,MAAMU,SAAS,GAAGA,CAAA,KAChBV,UAAU,CAACW,QAAQ,CAAC;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC;EACnC,oBACExC,OAAA,CAACF,IAAI;IACHwC,SAAS,EAAEA,SAAU;IACrBG,KAAK,EAAE,GAAI;IACXhC,OAAO,EAAEA,OAAQ;IACjBiC,MAAM,EAAE;EAAE;IAAAV,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEN;AAACQ,GAAA,GAXQP,QAAQ;AAajB,eAAenC,GAAG;AAAC,IAAAoC,EAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAP,EAAA;AAAAO,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}